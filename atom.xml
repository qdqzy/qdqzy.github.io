<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tonyqzy</title>
  
  <subtitle>大概是做算法与数据挖掘的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qdqzy/qdqzy.github.io/"/>
  <updated>2019-10-08T15:01:56.282Z</updated>
  <id>http://qdqzy/qdqzy.github.io/</id>
  
  <author>
    <name>Tony Qin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo 迁移记录</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/10/08/hexo%20%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/10/08/hexo 迁移记录/</id>
    <published>2019-10-08T14:14:20.000Z</published>
    <updated>2019-10-08T15:01:56.282Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算将主力机换为Windows，于是做了一下数据迁移的工作。Mac比较的一点就是有<strong>Time Machine</strong>功能，外接硬盘或者nas备份一下就可以了。我没啥要backup的主要是一些照片和文档，生产环境这东西相当年买来的时候自己没用过Linux就开始瞎捣鼓填了不少坑，环境也装点的乱起八糟还不如从头开始。</p><p>有一件比较重要的事情是我的博客得搬出来。<em>hexo</em>真的是好文明。</p><p>step1：copy出5个重要文件/夹。</p><ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/</li></ul><p>step2：迁移目的主机设置git，node.js.安装过程直接百度。</p><p>step3：建立ssh key。主要命令设置git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;qdqzy&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;876138262@qq.com&quot;</span><br></pre></td></tr></table></figure></p><p>rsa加密key<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;876138262@qq.com&quot;</span><br></pre></td></tr></table></figure></p><p>一路回车。生成完毕之后。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure></p><p>复制公钥id_rsa.pub</p><p>step3：github设置新的ssh key。step4：进入复制文件所在目录。安装hexo.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装完毕后进行相关package安装。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p><p>step4：进行本地验证及push验证。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近打算将主力机换为Windows，于是做了一下数据迁移的工作。Mac比较的一点就是有&lt;strong&gt;Time Machine&lt;/strong&gt;功能，外接硬盘或者nas备份一下就可以了。我没啥要backup的主要是一些照片和文档，生产环境这东西相当年买来的时候自己没用过Li
      
    
    </summary>
    
    
      <category term="杂项 blog" scheme="http://qdqzy/qdqzy.github.io/tags/%E6%9D%82%E9%A1%B9-blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/10/08/hello-world/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/10/08/hello-world/</id>
    <published>2019-10-08T13:20:45.395Z</published>
    <updated>2018-11-23T15:36:26.350Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac下进行Tensorflow可视化的问题</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/06/14/Mac%E4%B8%8B%E8%BF%9B%E8%A1%8CTensorflow%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/06/14/Mac下进行Tensorflow可视化的问题/</id>
    <published>2019-06-14T01:14:11.000Z</published>
    <updated>2019-06-14T01:34:25.390Z</updated>
    
    <content type="html"><![CDATA[<p>最近主要在用Mac来进行日常学习，之一直在Windows平台进行模型训练，毕竟还有块Nvidia GForce 960M，可以用CUDA跑跑。</p><p>我主要使用Tensorflow搭建模型，Tensorflow进行可视化主要使用Tensorboard这个工具。windows下在命令行使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir = path/to/your/directory</span><br></pre></td></tr></table></figure></p><p>可以开启指定目录下的日志文件。在mac下输入后发现无法找到指定的日志文件。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="mac上运行event-file，注意logdir后不要加等号！！"><a href="#mac上运行event-file，注意logdir后不要加等号！！" class="headerlink" title="mac上运行event file，注意logdir后不要加等号！！"></a>mac上运行event file，注意logdir后不要加等号！！</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir path/to/your/directory</span><br></pre></td></tr></table></figure><img src="/2019/06/14/Mac下进行Tensorflow可视化的问题/cmd.png" title="命令"><p>之后打开127.0.0.1:6006端口可以查看到生成的计算图。<img src="/2019/06/14/Mac下进行Tensorflow可视化的问题/pic.png" title="可视化"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近主要在用Mac来进行日常学习，之一直在Windows平台进行模型训练，毕竟还有块Nvidia GForce 960M，可以用CUDA跑跑。&lt;/p&gt;
&lt;p&gt;我主要使用Tensorflow搭建模型，Tensorflow进行可视化主要使用Tensorboard这个工具。win
      
    
    </summary>
    
    
      <category term="Tensorflow Tensorboard" scheme="http://qdqzy/qdqzy.github.io/tags/Tensorflow-Tensorboard/"/>
    
  </entry>
  
  <entry>
    <title>3.6 层级索引</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/26/3.6%20%E5%B1%82%E7%BA%A7%E7%B4%A2%E5%BC%95/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/26/3.6 层级索引/</id>
    <published>2019-04-26T00:49:27.000Z</published>
    <updated>2019-06-13T01:37:18.020Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><p>这个是用来解决三位思维数据等高维度的问题。 实践中通过层级索引hierarchical indexing 配合多个不同的等级 可以将高位转为一维或者二维的低维度数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="3-6-1-多级索引Series"><a href="#3-6-1-多级索引Series" class="headerlink" title="3.6.1 多级索引Series"></a>3.6.1 多级索引Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用一个元组表示索引</span></span><br><span class="line">index = [(<span class="string">'California'</span>, <span class="number">2000</span>), (<span class="string">'California'</span>, <span class="number">2001</span>), (<span class="string">'New York'</span>, <span class="number">2000</span>), (<span class="string">'New York'</span>, <span class="number">2001</span>)]</span><br><span class="line">populaiton = [<span class="number">165416</span>,<span class="number">213884</span>,<span class="number">665468</span>,<span class="number">598949</span>]</span><br><span class="line">pop= pd.Series(populaiton, index= index)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop</span><br></pre></td></tr></table></figure><pre><code>(California, 2000)    165416(California, 2001)    213884(New York, 2000)      665468(New York, 2001)      598949dtype: int64</code></pre><p><strong>好方法!!!</strong> Pandas 多级索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = pd.MultiIndex.from_tuples(index)</span><br><span class="line">index</span><br></pre></td></tr></table></figure><pre><code>MultiIndex(levels=[[&apos;California&apos;, &apos;New York&apos;], [2000, 2001]],           labels=[[0, 0, 1, 1], [0, 1, 0, 1]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop = pop.reindex(index)</span><br><span class="line">pop</span><br></pre></td></tr></table></figure><pre><code>California  2000    165416            2001    213884New York    2000    665468            2001    598949dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop[:, <span class="number">2001</span>]</span><br></pre></td></tr></table></figure><pre><code>California    213884New York      598949dtype: int64</code></pre><p>3.高维数据的多级索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#unstack()方法可以快速将一个多级索引的Series转化为普通的DataFrame</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop_df = pop.unstack()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop_df</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>2000</th><th>2001</th></tr></thead><tbody><tr><td>California</td><td>165416</td><td>213884</td></tr><tr><td>New York</td><td>665468</td><td>598949</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop_df.stack()</span><br></pre></td></tr></table></figure><pre><code>California  2000    165416            2001    213884New York    2000    665468            2001    598949dtype: int64</code></pre><h3 id="3-6-2-多级索引的创建"><a href="#3-6-2-多级索引的创建" class="headerlink" title="3.6.2 多级索引的创建"></a>3.6.2 多级索引的创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">4</span>,<span class="number">2</span>), index = [[<span class="string">'a'</span>,<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]], columns= [ <span class="string">'data1'</span>, <span class="string">'data2'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>0.860844</td>      <td>0.944118</td>    </tr>    <tr>      <th>2</th>      <td>0.403881</td>      <td>0.358596</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>0.988218</td>      <td>0.806094</td>    </tr>    <tr>      <th>2</th>      <td>0.461608</td>      <td>0.547859</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为Series或者DataFrame 创建多级索引的最直接方法是将index 参数设置为至少二维的索引数据 MultiIndex 创建在后台完成</span></span><br></pre></td></tr></table></figure><p>1.显式创建多级索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.MultiIndex.from_arrays([[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]])</span><br></pre></td></tr></table></figure><pre><code>MultiIndex(levels=[[&apos;a&apos;, &apos;b&apos;], [1, 2]],           labels=[[0, 0, 1, 1], [0, 1, 0, 1]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以用两个索引的笛卡尔积创建MultiIndex：</span></span><br><span class="line">pd.MultiIndex.from_product([[<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><pre><code>MultiIndex(levels=[[&apos;a&apos;, &apos;b&apos;], [1, 2]],           labels=[[0, 0, 1, 1], [0, 1, 0, 1]])</code></pre><p>2.多级索引的等级名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop</span><br></pre></td></tr></table></figure><pre><code>California  2000    165416            2001    213884New York    2000    665468            2001    598949dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop.index.names = [<span class="string">'state'</span>, <span class="string">'year'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop</span><br></pre></td></tr></table></figure><pre><code>state       yearCalifornia  2000    165416            2001    213884New York    2000    665468            2001    598949dtype: int64</code></pre><p>3.多级列索引</p><p>可以在列索引的第一级查询从而检索出整个DataFrame</p><h3 id="3-6-3多级索引的取值与切片"><a href="#3-6-3多级索引的取值与切片" class="headerlink" title="3.6.3多级索引的取值与切片"></a>3.6.3多级索引的取值与切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop</span><br></pre></td></tr></table></figure><pre><code>state       yearCalifornia  2000    165416            2001    213884New York    2000    665468            2001    598949dtype: int64</code></pre><p>通过对多个级别的索引值获取单个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop[<span class="string">'California'</span>, <span class="number">2000</span>]<span class="comment">#相当于一个二维坐标定位</span></span><br></pre></td></tr></table></figure><pre><code>165416</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 局部取值 只索引某一个层级 </span></span><br><span class="line">pop[<span class="string">'California'</span>]</span><br></pre></td></tr></table></figure><pre><code>year2000    1654162001    213884dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#局部切片</span></span><br><span class="line">pop.loc[<span class="string">'California'</span>:<span class="string">'New York'</span>]</span><br></pre></td></tr></table></figure><pre><code>state       yearCalifornia  2000    165416            2001    213884New York    2000    665468            2001    598949dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#剩下的和基本的索引操作是一样的</span></span><br></pre></td></tr></table></figure><ol start="2"><li>DataFrame多级索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先创建一个体检数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = pd.MultiIndex.from_product([[<span class="number">2013</span>, <span class="number">2014</span>], [<span class="number">1</span>,<span class="number">2</span>]], names =[<span class="string">'year'</span>, <span class="string">'visit'</span>])</span><br><span class="line">columns = pd.MultiIndex.from_product([[<span class="string">'Bob'</span>, <span class="string">'Guido'</span>, <span class="string">'Sue'</span>], [<span class="string">'HR'</span>, <span class="string">'Temp'</span>]], names = [<span class="string">'subject'</span>, <span class="string">'type'</span>])</span><br><span class="line">data = np.round(np.random.rand(<span class="number">4</span>,<span class="number">6</span>) , <span class="number">1</span>)</span><br><span class="line">data[:,::<span class="number">2</span>] *= <span class="number">10</span></span><br><span class="line">data += <span class="number">37</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">health_data = pd.DataFrame(data, index = index ,columns=columns)</span><br><span class="line">health_data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead tr th {        text-align: left;    }    .dataframe thead tr:last-of-type th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>subject</th>      <th colspan="2" halign="left">Bob</th>      <th colspan="2" halign="left">Guido</th>      <th colspan="2" halign="left">Sue</th>    </tr>    <tr>      <th></th>      <th>type</th>      <th>HR</th>      <th>Temp</th>      <th>HR</th>      <th>Temp</th>      <th>HR</th>      <th>Temp</th>    </tr>    <tr>      <th>year</th>      <th>visit</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">2013</th>      <th>1</th>      <td>41.0</td>      <td>37.3</td>      <td>45.0</td>      <td>37.2</td>      <td>45.0</td>      <td>37.4</td>    </tr>    <tr>      <th>2</th>      <td>47.0</td>      <td>37.3</td>      <td>39.0</td>      <td>37.2</td>      <td>41.0</td>      <td>37.7</td>    </tr>    <tr>      <th rowspan="2" valign="top">2014</th>      <th>1</th>      <td>42.0</td>      <td>37.7</td>      <td>42.0</td>      <td>37.4</td>      <td>37.0</td>      <td>37.3</td>    </tr>    <tr>      <th>2</th>      <td>47.0</td>      <td>37.0</td>      <td>41.0</td>      <td>37.8</td>      <td>46.0</td>      <td>37.3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选取Guido的心率数据</span></span><br><span class="line">health_data[<span class="string">'Guido'</span>,<span class="string">"HR"</span>]</span><br></pre></td></tr></table></figure><pre><code>year  visit2013  1        45.0      2        39.02014  1        42.0      2        41.0Name: (Guido, HR), dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#也可以好用loc iloc ix索引器</span></span><br><span class="line">health_data.iloc[:<span class="number">2</span>, :<span class="number">2</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead tr th {        text-align: left;    }    .dataframe thead tr:last-of-type th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>subject</th>      <th colspan="2" halign="left">Bob</th>    </tr>    <tr>      <th></th>      <th>type</th>      <th>HR</th>      <th>Temp</th>    </tr>    <tr>      <th>year</th>      <th>visit</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">2013</th>      <th>1</th>      <td>41.0</td>      <td>37.3</td>    </tr>    <tr>      <th>2</th>      <td>47.0</td>      <td>37.3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">health_data.loc[:, (<span class="string">'Bob'</span>,<span class="string">'HR'</span>)]</span><br></pre></td></tr></table></figure><pre><code>year  visit2013  1        41.0      2        47.02014  1        42.0      2        47.0Name: (Bob, HR), dtype: float64</code></pre><h3 id="3-6-4-多级索引行列转换"><a href="#3-6-4-多级索引行列转换" class="headerlink" title="3.6.4 多级索引行列转换"></a>3.6.4 多级索引行列转换</h3><p>1.有序的索引和无序索引 。。。。xian</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个是用来解决三位思维数
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>3.5 缺失值处理</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/25/3.5%20%E5%A4%84%E7%90%86%E7%BC%BA%E5%A4%B1%E5%80%BC/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/25/3.5 处理缺失值/</id>
    <published>2019-04-25T00:49:27.000Z</published>
    <updated>2019-06-13T01:37:23.760Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h3 id="3-5-1-选择处理方法"><a href="#3-5-1-选择处理方法" class="headerlink" title="3.5.1 选择处理方法|"></a>3.5.1 选择处理方法|</h3><p>一般有两种方法：一种方法是通过覆盖全局的<strong>掩码</strong>表示缺失值，另一种方法是<strong>标签值</strong>表示缺失值</p><p><strong>掩码</strong>：可能是一个与原装数组维度相同的完整布尔类型数组，也可能是一个用比特表示有缺陷的局部状态。</p><p><strong>标签</strong> 可能是一个具体的数字，也可能是一些极少出现的形式，也有可能是全局的值。</p><h3 id="3-5-2-Pandas-的缺失-值"><a href="#3-5-2-Pandas-的缺失-值" class="headerlink" title="3.5.2  Pandas 的缺失+值"></a>3.5.2  Pandas 的缺失+值</h3><p>1.None：Python对象类型的缺失值 object 类型</p><p>2.NaN: 数值类型的缺失值 ： 不是一个数字</p><p>3.区别： 可以等价|</p><h3 id="3-5-3-处理缺失值-import！！"><a href="#3-5-3-处理缺失值-import！！" class="headerlink" title="3.5.3 处理缺失值 import！！"></a>3.5.3 处理缺失值 import！！</h3><h4 id="1-发现缺失值-isnull-notnull"><a href="#1-发现缺失值-isnull-notnull" class="headerlink" title="1. 发现缺失值 isnull()  notnull()"></a>1. 发现缺失值 isnull()  notnull()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>,np.nan, <span class="string">'eh'</span>, <span class="literal">None</span>])</span><br><span class="line">data.isnull()</span><br></pre></td></tr></table></figure><pre><code>0    False1     True2    False3     Truedtype: bool</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#布尔类型的掩码数组可以直接作为Series或DataFrame的索引使用</span></span><br><span class="line">data[data.notnull()]</span><br></pre></td></tr></table></figure><pre><code>0     12    ehdtype: object</code></pre><h4 id="2-剔除缺失值"><a href="#2-剔除缺失值" class="headerlink" title="2.剔除缺失值"></a>2.剔除缺失值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dropna()</span><br></pre></td></tr></table></figure><pre><code>0     12    ehdtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>0       11     NaN2      eh3    Nonedtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dataframe上要进行一些设置才可以使用</span></span><br><span class="line">df = pd.DataFrame([ [<span class="number">1</span>, np.nan, <span class="number">2</span>],</span><br><span class="line">                                  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">                                  [np.nan, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>2.0</td>      <td>3.0</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>4.0</td>      <td>6</td>    </tr>  </tbody></table></div><p>不能从dataFrame中单独剔除一个值，要么去掉一个整行或者一个整列。 dropna()默认是去掉一整行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>2.0</td>      <td>3.0</td>      <td>5</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(axis=<span class="number">1</span>) <span class="comment">#去掉列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>2.0</td>      <td>3.0</td>      <td>5</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#行列全部去掉</span></span><br><span class="line">df.dropna(how=<span class="string">'all'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>2.0</td>      <td>3.0</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>4.0</td>      <td>6</td>    </tr>  </tbody></table></div><h4 id="3-填充默认值"><a href="#3-填充默认值" class="headerlink" title="3. 填充默认值"></a>3. 填充默认值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>, np.nan, <span class="number">2</span>, <span class="literal">None</span>,  <span class="number">3</span>], index = list(<span class="string">'abces'</span>))</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    1.0b    NaNc    2.0e    NaNs    3.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.fillna(<span class="number">99</span>)<span class="comment"># use99 to fill nan</span></span><br></pre></td></tr></table></figure><pre><code>a     1.0b    99.0c     2.0e    99.0s     3.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#也可以用缺失值前面的有效值进行从前往后的填充 forward-fill</span></span><br><span class="line">data.fillna(method=<span class="string">'ffill'</span>)</span><br></pre></td></tr></table></figure><pre><code>a    1.0b    1.0c    2.0e    2.0s    3.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从后往前填充 back-fill</span></span><br><span class="line">data.fillna(method=<span class="string">'bfill'</span>)</span><br></pre></td></tr></table></figure><pre><code>a    1.0b    2.0c    2.0e    3.0s    3.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(method=<span class="string">'ffill'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>2.0</td>      <td>3.0</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>2.0</td>      <td>4.0</td>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(method=<span class="string">'ffill'</span>, axis= <span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>1.0</td>      <td>2.0</td>    </tr>    <tr>      <th>1</th>      <td>2.0</td>      <td>3.0</td>      <td>5.0</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>4.0</td>      <td>6.0</td>    </tr>  </tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-5-1-选
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>3.4 Pandas数值计算</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/25/3.4%20Pandas%20%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/25/3.4 Pandas 数值计算/</id>
    <published>2019-04-25T00:49:27.000Z</published>
    <updated>2019-06-13T01:37:47.420Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="3-4-1-通用函数：保留索引"><a href="#3-4-1-通用函数：保留索引" class="headerlink" title="3.4.1 通用函数：保留索引"></a>3.4.1 通用函数：保留索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rng = np.random.RandomState(<span class="number">42</span>)</span><br><span class="line">ser = pd.Series(rng.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line">ser</span><br></pre></td></tr></table></figure><pre><code>0    61    32    73    4dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df =pd.DataFrame(rng.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">4</span>)), </span><br><span class="line">                              columns = [<span class="string">'A'</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>2000</th><th>2001</th></tr></thead><tbody><tr><td>California</td><td>165416</td><td>213884</td></tr><tr><td>New York</td><td>665468</td><td>598949</td></tr></tbody></table><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>6</td>      <td>9</td>      <td>2</td>      <td>6</td>    </tr>    <tr>      <th>1</th>      <td>7</td>      <td>4</td>      <td>3</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>7</td>      <td>2</td>      <td>5</td>      <td>4</td>    </tr>  </tbody></table></div><p>如果两个对象使用Numpy通用函数， 生成的结果是另一个保留索引的Pandas对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.exp(ser)</span><br></pre></td></tr></table></figure><pre><code>0     403.4287931      20.0855372    1096.6331583      54.598150dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sin(df * np.pi / <span class="number">4</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-1.000000</td>      <td>7.071068e-01</td>      <td>1.000000</td>      <td>-1.000000e+00</td>    </tr>    <tr>      <th>1</th>      <td>-0.707107</td>      <td>1.224647e-16</td>      <td>0.707107</td>      <td>-7.071068e-01</td>    </tr>    <tr>      <th>2</th>      <td>-0.707107</td>      <td>1.000000e+00</td>      <td>-0.707107</td>      <td>1.224647e-16</td>    </tr>  </tbody></table></div><h3 id="通用函数：索引对齐"><a href="#通用函数：索引对齐" class="headerlink" title="通用函数：索引对齐"></a>通用函数：索引对齐</h3><p>这个主要是用在处理二元计算时对齐数据的。</p><p>1.Series索引对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">area = pd.Series(&#123;<span class="string">'Alska'</span>:<span class="number">1723</span>, <span class="string">'Texas'</span>: <span class="number">6871</span>, <span class="string">'California'</span>: <span class="number">4235</span>&#125;, name = <span class="string">'area'</span>)</span><br><span class="line">population = pd.Series(&#123;<span class="string">'California'</span>:<span class="number">1456434</span>,<span class="string">"Texas"</span>:<span class="number">654687</span>,<span class="string">'New York'</span>:<span class="number">4565732</span>&#125;, name = <span class="string">'population'</span>)</span><br><span class="line">print(area)</span><br><span class="line">print()</span><br><span class="line">print(population)</span><br></pre></td></tr></table></figure><pre><code>Alska         1723Texas         6871California    4235Name: area, dtype: int64California    1456434Texas          654687New York      4565732Name: population, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">population / area</span><br></pre></td></tr></table></figure><pre><code>Alska                NaNCalifornia    343.904132New York             NaNTexas          95.282637dtype: float64</code></pre><p><strong>结果是两个输入数组索引的并集， 缺失位置用NaN填充；NaN值还不是想要的结果可以设置参数自定义A或B的缺省值</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = pd.Series([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>], index= [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">B = pd.Series([<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>], index= [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(A)</span><br><span class="line">print(B)</span><br></pre></td></tr></table></figure><pre><code>0    21    43    6dtype: int640    11    52    8dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A + B</span><br></pre></td></tr></table></figure><pre><code>0    3.01    9.02    NaN3    NaNdtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里就可以自定应缺省填充规则</span></span><br><span class="line">A.add(B, fill_value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>0    3.01    9.02    8.03    6.0dtype: float64</code></pre><p>2.DataFrame对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C =pd.DataFrame(rng.randint(<span class="number">0</span>, <span class="number">20</span>, (<span class="number">2</span>,<span class="number">2</span>)), </span><br><span class="line">                             columns  = list(<span class="string">"CD"</span>))</span><br><span class="line">C</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>9</td>      <td>15</td>    </tr>    <tr>      <th>1</th>      <td>14</td>      <td>14</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D =pd.DataFrame(rng.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>,<span class="number">3</span>)), </span><br><span class="line">                             columns  = list(<span class="string">"DEC"</span>))</span><br><span class="line">D</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>D</th>      <th>E</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2</td>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>8</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>6</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C + D</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>12.0</td>      <td>17.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>18.0</td>      <td>22.0</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同样也可以使用fill_value参数自定义缺省值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fill = C.stack().mean()</span><br><span class="line">C.add(D, fill_value=fill)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>12.0</td>      <td>17.0</td>      <td>19.0</td>    </tr>    <tr>      <th>1</th>      <td>18.0</td>      <td>22.0</td>      <td>15.0</td>    </tr>    <tr>      <th>2</th>      <td>17.0</td>      <td>15.0</td>      <td>19.0</td>    </tr>  </tbody></table></div><h3 id="3-4-3-通用函数：DataFrame与Series计算"><a href="#3-4-3-通用函数：DataFrame与Series计算" class="headerlink" title="3.4.3 通用函数：DataFrame与Series计算"></a>3.4.3 通用函数：DataFrame与Series计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = rng.randint(<span class="number">10</span> ,size = (<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure><pre><code>array([[8, 6, 1, 3],       [8, 1, 9, 8],       [9, 4, 1, 3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A-A[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  0,  0,  0],       [ 0, -5,  8,  5],       [ 1, -2,  0,  0]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(A, columns=list(<span class="string">'QWER'</span>))</span><br><span class="line">df - df.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Q</th>      <th>W</th>      <th>E</th>      <th>R</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>0</td>      <td>-5</td>      <td>8</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>-2</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'R'</span>]</span><br></pre></td></tr></table></figure><pre><code>0    31    82    3Name: R, dtype: int32</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>3.3 数据取值与选择</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/24/3.3%20%E6%95%B0%E6%8D%AE%E5%8F%96%E5%80%BC%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/24/3.3 数据取值与选择/</id>
    <published>2019-04-24T00:49:27.000Z</published>
    <updated>2019-06-13T01:36:44.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-3-数据取值与选择"><a href="#3-3-数据取值与选择" class="headerlink" title="3.3 数据取值与选择"></a>3.3 数据取值与选择</h2><p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h3 id="3-3-1-Series数据选择方法"><a href="#3-3-1-Series数据选择方法" class="headerlink" title="3.3.1 Series数据选择方法"></a>3.3.1 Series数据选择方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.将Series看作字典</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data  = pd.Series([<span class="number">0.25</span>,<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>], index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    0.25b    0.30c    0.40d    0.50dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'b'</span>]</span><br></pre></td></tr></table></figure><pre><code>0.3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> data</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'z'</span> <span class="keyword">in</span> data</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.keys</span><br></pre></td></tr></table></figure><pre><code>&lt;bound method Series.keys of a    0.25b    0.30c    0.40d    0.50dtype: float64&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.index</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以使用字典语法调整数据</span></span><br><span class="line">data[<span class="string">'e'</span>] = <span class="number">1.25</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    0.25b    0.30c    0.40d    0.50e    1.25dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.Series看作一维数组</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'a'</span>:<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><pre><code>a    0.25b    0.30c    0.40dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>a    0.25b    0.30dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[data &gt; <span class="number">0.3</span>]</span><br></pre></td></tr></table></figure><pre><code>c    0.40d    0.50e    1.25dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[[<span class="string">'a'</span>, <span class="string">'e'</span>]]</span><br></pre></td></tr></table></figure><pre><code>a    0.25e    1.25dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.索引器 loc iloc ix</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>], index= [<span class="number">1</span>,<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>1    a3    b4    c5    ddtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#loc 显式切片</span></span><br><span class="line"></span><br><span class="line">data.loc[<span class="number">1</span>]<span class="comment">#显式切片</span></span><br></pre></td></tr></table></figure><pre><code>&apos;a&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iloc 隐式切片, 遵循左闭又开区间</span></span><br><span class="line"></span><br><span class="line">data.iloc[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>&apos;b&apos;</code></pre><h3 id="3-3-2-DataFrame数据选择方法"><a href="#3-3-2-DataFrame数据选择方法" class="headerlink" title="3.3.2 DataFrame数据选择方法"></a>3.3.2 DataFrame数据选择方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.DataFrame看作字典</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">'California'</span> : <span class="number">1548</span>,</span><br><span class="line">                               <span class="string">'Texas'</span>: <span class="number">1131</span>,</span><br><span class="line">                                <span class="string">'New York'</span>: <span class="number">1922</span>,</span><br><span class="line">                                <span class="string">'Florida'</span>: <span class="number">1955</span>,</span><br><span class="line">                                <span class="string">'Illinois'</span>:<span class="number">1288</span>&#125;</span><br><span class="line">population = pd.Series(population_dict)</span><br><span class="line">area_dict = &#123;<span class="string">'California'</span> : <span class="number">61548</span>,</span><br><span class="line">                               <span class="string">'Texas'</span>: <span class="number">51131</span>,</span><br><span class="line">                                <span class="string">'New York'</span>: <span class="number">19422</span>,</span><br><span class="line">                                <span class="string">'Florida'</span>: <span class="number">31955</span>,</span><br><span class="line">                                <span class="string">'Illinois'</span>:<span class="number">21288</span>&#125;</span><br><span class="line">area = pd.Series(area_dict)<span class="comment">#将字典传入</span></span><br><span class="line">state = pd.DataFrame(&#123;<span class="string">'population'</span> : population, <span class="string">'area'</span> : area &#125;)</span><br><span class="line">state</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>area</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>1548</td>      <td>61548</td>    </tr>    <tr>      <th>Texas</th>      <td>1131</td>      <td>51131</td>    </tr>    <tr>      <th>New York</th>      <td>1922</td>      <td>19422</td>    </tr>    <tr>      <th>Florida</th>      <td>1955</td>      <td>31955</td>    </tr>    <tr>      <th>Illinois</th>      <td>1288</td>      <td>21288</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state[<span class="string">'area'</span>]</span><br></pre></td></tr></table></figure><pre><code>California    61548Texas         51131New York      19422Florida       31955Illinois      21288Name: area, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.area</span><br></pre></td></tr></table></figure><pre><code>California    61548Texas         51131New York      19422Florida       31955Illinois      21288Name: area, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取列 data.cloumnName = data.['CloumnName'] 但是如果列名和df的方法名相同就不可以用.索引</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.DataFrame 堪称二维数组</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.values</span><br></pre></td></tr></table></figure><pre><code>array([[ 1548, 61548],       [ 1131, 51131],       [ 1922, 19422],       [ 1955, 31955],       [ 1288, 21288]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.T</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>California</th>      <th>Texas</th>      <th>New York</th>      <th>Florida</th>      <th>Illinois</th>    </tr>  </thead>  <tbody>    <tr>      <th>population</th>      <td>1548</td>      <td>1131</td>      <td>1922</td>      <td>1955</td>      <td>1288</td>    </tr>    <tr>      <th>area</th>      <td>61548</td>      <td>51131</td>      <td>19422</td>      <td>31955</td>      <td>21288</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state[<span class="string">'area'</span>]</span><br></pre></td></tr></table></figure><pre><code>California    61548Texas         51131New York      19422Florida       31955Illinois      21288Name: area, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.iloc[:<span class="number">3</span>,:<span class="number">2</span>] <span class="comment">#隐式索引</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>area</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>1548</td>      <td>61548</td>    </tr>    <tr>      <th>Texas</th>      <td>1131</td>      <td>51131</td>    </tr>    <tr>      <th>New York</th>      <td>1922</td>      <td>19422</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.loc[:<span class="string">'Florida'</span>, :<span class="string">'area'</span>] <span class="comment">#显式索引</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>area</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>1548</td>      <td>61548</td>    </tr>    <tr>      <th>Texas</th>      <td>1131</td>      <td>51131</td>    </tr>    <tr>      <th>New York</th>      <td>1922</td>      <td>19422</td>    </tr>    <tr>      <th>Florida</th>      <td>1955</td>      <td>31955</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.Other methods</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state[<span class="string">'Florida'</span> : <span class="string">'Illinois'</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>area</th>    </tr>  </thead>  <tbody>    <tr>      <th>Florida</th>      <td>1955</td>      <td>31955</td>    </tr>    <tr>      <th>Illinois</th>      <td>1288</td>      <td>21288</td>    </tr>  </tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-3-数据取值与选择&quot;&gt;&lt;a href=&quot;#3-3-数据取值与选择&quot; class=&quot;headerlink&quot; title=&quot;3.3 数据取值与选择&quot;&gt;&lt;/a&gt;3.3 数据取值与选择&lt;/h2&gt;&lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.co
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>3.2 Pandas对象简介</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/23/3.2%20Pandas%20%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/23/3.2 Pandas 对象简介/</id>
    <published>2019-04-23T00:49:27.000Z</published>
    <updated>2019-06-13T01:37:44.160Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure></p><h3 id="3-2-1-Series对象"><a href="#3-2-1-Series对象" class="headerlink" title="3.2.1 Series对象"></a>3.2.1 Series对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#series对象是一个带索引数据构成的一维数组。 可以用一个数组创建Series对象</span></span><br><span class="line">data = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>0    11    22    33    54    7dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以通过values的index获取</span></span><br><span class="line">print(data.index)</span><br><span class="line">print(data.values)</span><br><span class="line">print(data[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>RangeIndex(start=0, stop=5, step=1)[1 2 3 5 7]2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>1    22    3dtype: int64</code></pre><p><strong>1. Series 是通用的 Numpy 数组</strong></p><p>Pandas 的 Series 对象 使用一种<strong>显示定义的索引与数值关联 </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">0.25</span>,<span class="number">3</span>,<span class="number">0.45</span>,<span class="number">0.75</span>], index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'b'</span>]</span><br></pre></td></tr></table></figure><pre><code>3.0</code></pre><p><strong> 也可以使用不连续或者不按顺序的索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">0.25</span>,<span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">1.0</span>],</span><br><span class="line">                            index = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>])</span><br><span class="line">data[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>0.3</code></pre><p><strong>2.Series是特殊的字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">'California'</span> : <span class="number">1548</span>,</span><br><span class="line">                               <span class="string">'Texas'</span>: <span class="number">1131</span>,</span><br><span class="line">                                <span class="string">'New York'</span>: <span class="number">1922</span>,</span><br><span class="line">                                <span class="string">'Florida'</span>: <span class="number">1955</span>,</span><br><span class="line">                                <span class="string">'Illinois'</span>:<span class="number">1288</span>&#125;</span><br><span class="line">population = pd.Series(population_dict)</span><br><span class="line">population</span><br></pre></td></tr></table></figure><pre><code>California    1548Texas         1131New York      1922Florida       1955Illinois      1288dtype: int64</code></pre><p>字典创建Series对象时，索引默认按照顺序排列。但是典型的取值方式任然使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">population[<span class="string">'California'</span>]</span><br></pre></td></tr></table></figure><pre><code>1548</code></pre><p>Series还支持数组形式的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">population[<span class="string">'California'</span>:<span class="string">'Illinois'</span>]</span><br></pre></td></tr></table></figure><pre><code>California    1548Texas         1131New York      1922Florida       1955Illinois      1288dtype: int64</code></pre><p>3.创建Series对象</p><p><em>1.列表orNumpy数组 </em></p><p><em>2.标量</em></p><p><em>3.字典</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><pre><code>0    21    32    4dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(<span class="number">5</span>, index=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>]) <span class="comment">#创建时惠重复填充到每个索引中</span></span><br></pre></td></tr></table></figure><pre><code>100    5200    5300    5dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(&#123;<span class="number">2</span>:<span class="string">'s'</span>,<span class="number">1</span>:<span class="string">"a"</span>,<span class="number">3</span>:<span class="string">'b'</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>2    s1    a3    bdtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = pd.Series(&#123;<span class="number">2</span>:<span class="string">'s'</span>,<span class="number">1</span>:<span class="string">"a"</span>,<span class="number">3</span>:<span class="string">'b'</span>&#125;, index=[<span class="number">3</span>,<span class="number">2</span>]) <span class="comment">#会保留显式定义的键值对</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>3    b2    sdtype: object</code></pre><h3 id="3-2-2-Pandas的DataFrame对象"><a href="#3-2-2-Pandas的DataFrame对象" class="headerlink" title="3.2.2 Pandas的DataFrame对象"></a>3.2.2 Pandas的DataFrame对象</h3><p>DataFrame可以看成一种灵活的行索引、又有列名的二维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">area_dict = &#123;<span class="string">'California'</span> : <span class="number">61548</span>,</span><br><span class="line">                               <span class="string">'Texas'</span>: <span class="number">51131</span>,</span><br><span class="line">                                <span class="string">'New York'</span>: <span class="number">19422</span>,</span><br><span class="line">                                <span class="string">'Florida'</span>: <span class="number">31955</span>,</span><br><span class="line">                                <span class="string">'Illinois'</span>:<span class="number">21288</span>&#125;</span><br><span class="line">area = pd.Series(area_dict)<span class="comment">#将字典传入</span></span><br><span class="line">area</span><br></pre></td></tr></table></figure><pre><code>California    61548Texas         51131New York      19422Florida       31955Illinois      21288dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state = pd.DataFrame(&#123;<span class="string">'population'</span> : population, <span class="string">'area'</span> : area &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>area</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>1548</td>      <td>61548</td>    </tr>    <tr>      <th>Texas</th>      <td>1131</td>      <td>51131</td>    </tr>    <tr>      <th>New York</th>      <td>1922</td>      <td>19422</td>    </tr>    <tr>      <th>Florida</th>      <td>1955</td>      <td>31955</td>    </tr>    <tr>      <th>Illinois</th>      <td>1288</td>      <td>21288</td>    </tr>  </tbody></table></div><p>左边的索引为index 上面的columns</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.index</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;California&apos;, &apos;Texas&apos;, &apos;New York&apos;, &apos;Florida&apos;, &apos;Illinois&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.columns</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;population&apos;, &apos;area&apos;], dtype=&apos;object&apos;)</code></pre><p>2.DataFrame是特殊的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(state[<span class="string">'area'</span>])</span><br><span class="line"><span class="string">'''映射到一个Series'''</span></span><br></pre></td></tr></table></figure><pre><code>California    61548Texas         51131New York      19422Florida       31955Illinois      21288Name: area, dtype: int64&apos;映射到一个Series&apos;</code></pre><p>data[0]返回第一行 data[‘列名’]返回某一列·</p><p>3.创建DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''单个Series'''</span></span><br><span class="line">pd.DataFrame(population,columns=[<span class="string">'population'</span>]) <span class="comment">#这里的列名可加可不加 不加的话就是0</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>1548</td>    </tr>    <tr>      <th>Texas</th>      <td>1131</td>    </tr>    <tr>      <th>New York</th>      <td>1922</td>    </tr>    <tr>      <th>Florida</th>      <td>1955</td>    </tr>    <tr>      <th>Illinois</th>      <td>1288</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#t通过字典列表</span></span><br><span class="line">data = [&#123;<span class="string">'a'</span>:q, <span class="string">'b'</span> : <span class="number">2</span> * q&#125; <span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">pd.DataFrame(data)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.Series对象字典</span></span><br><span class="line">pd.DataFrame(&#123;<span class="string">'population'</span> : population, <span class="string">"area"</span>: area&#125;)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>area</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>1548</td>      <td>61548</td>    </tr>    <tr>      <th>Texas</th>      <td>1131</td>      <td>51131</td>    </tr>    <tr>      <th>New York</th>      <td>1922</td>      <td>19422</td>    </tr>    <tr>      <th>Florida</th>      <td>1955</td>      <td>31955</td>    </tr>    <tr>      <th>Illinois</th>      <td>1288</td>      <td>21288</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.Numpy 二维数组</span></span><br><span class="line">pd.DataFrame(np.random.rand(<span class="number">3</span>,<span class="number">2</span>), columns=[<span class="string">'fll'</span>, <span class="string">'bar'</span>] , index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>fll</th>      <th>bar</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.672980</td>      <td>0.830471</td>    </tr>    <tr>      <th>b</th>      <td>0.446971</td>      <td>0.244948</td>    </tr>    <tr>      <th>c</th>      <td>0.352801</td>      <td>0.680514</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.numpy结构化数组</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-Pandas的Index对象-（不可变！！"><a href="#3-2-3-Pandas的Index对象-（不可变！！" class="headerlink" title="3.2.3 Pandas的Index对象 （不可变！！"></a>3.2.3 Pandas的Index对象 <em>（不可变！！</em></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ind =  pd.Index([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>])</span><br><span class="line">ind</span><br></pre></td></tr></table></figure><pre><code>Int64Index([2, 3, 5, 7, 9], dtype=&apos;int64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'index 是可以自己创建的！但是不可变！！'</span>)</span><br></pre></td></tr></table></figure><pre><code>index 是可以自己创建的！但是不可变！！</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.INdex是有序集合</span></span><br><span class="line">indA= pd.Index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>])</span><br><span class="line">indB = pd.Index([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>])</span><br><span class="line">indA&amp;indB</span><br></pre></td></tr></table></figure><pre><code>Int64Index([3, 5], dtype=&apos;int64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indA | indB <span class="comment">#并集</span></span><br></pre></td></tr></table></figure><pre><code>Int64Index([1, 2, 3, 5, 7, 9], dtype=&apos;int64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indA ^ indB <span class="comment">#已获</span></span><br></pre></td></tr></table></figure><pre><code>Int64Index([1, 2, 7, 9], dtype=&apos;int64&apos;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;

&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>2.9 结构化数组</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/22/2.9%20%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/22/2.9 结构化数组/</id>
    <published>2019-04-22T00:49:27.000Z</published>
    <updated>2019-06-13T01:38:16.300Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h3 id="2-9-1-生成结构化数组"><a href="#2-9-1-生成结构化数组" class="headerlink" title="2.9.1 生成结构化数组"></a>2.9.1 生成结构化数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span>  np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dtype([(<span class="string">'name'</span>,<span class="string">'S10'</span>),(<span class="string">'age'</span>,<span class="string">'i4'</span>),(<span class="string">'weight'</span>,<span class="string">'f8'</span>)])</span><br></pre></td></tr></table></figure><pre><code>dtype([(&apos;name&apos;, &apos;S10&apos;), (&apos;age&apos;, &apos;&lt;i4&apos;), (&apos;weight&apos;, &apos;&lt;f8&apos;)])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果名称不重要的可以中一个字符串指定</span></span><br><span class="line">np.dtype(<span class="string">'S10,i4,f8'</span>)</span><br></pre></td></tr></table></figure><pre><code>dtype([(&apos;f0&apos;, &apos;S10&apos;), (&apos;f1&apos;, &apos;&lt;i4&apos;), (&apos;f2&apos;, &apos;&lt;f8&apos;)])</code></pre><p>2.9.2 高级复合类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tp = np.dtype([(<span class="string">'id'</span>,<span class="string">'i8'</span>),(<span class="string">'mat'</span>,<span class="string">'f8'</span>,(<span class="number">3</span>,<span class="number">3</span>))])</span><br><span class="line">X = np.zeros(<span class="number">1</span>, dtype=tp)</span><br><span class="line">print(X[<span class="number">0</span>])</span><br><span class="line">print(X[<span class="string">'mat'</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>(0, [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]])[[0. 0. 0.] [0. 0. 0.] [0. 0. 0.]]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-9-1-生
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达机器学习05</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/15/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A005/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/15/吴恩达机器学习05/</id>
    <published>2019-04-15T07:52:44.000Z</published>
    <updated>2019-08-14T07:38:23.560Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="机器学习" scheme="http://qdqzy/qdqzy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2.8 Numpy中的快速排序：np.sort 和 np.argsort</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/2.8%20%E6%95%B0%E7%BB%84%E7%9A%84%E6%8E%92%E5%BA%8F/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/2.8 数组的排序/</id>
    <published>2019-04-09T00:49:27.000Z</published>
    <updated>2019-06-13T01:38:24.670Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h3 id="2-8-1-Numpy中的快速排序：np-sort-和-np-argsort"><a href="#2-8-1-Numpy中的快速排序：np-sort-和-np-argsort" class="headerlink" title="2.8.1 Numpy中的快速排序：np.sort 和 np.argsort"></a>2.8.1 Numpy中的快速排序：np.sort 和 np.argsort</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>])<span class="comment">#不修改原始数组的基础上返回一个排好的数组</span></span><br><span class="line">np.sort(x)</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.sort()</span><br><span class="line">print(x)<span class="comment">#用排好的数组代替原始数组</span></span><br></pre></td></tr></table></figure><pre><code>[1 2 3 4 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回原始数组排好的索引值：</span></span><br><span class="line">x = np.array([<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line">i = np.argsort(x)</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><pre><code>[1 0 3 2 4]</code></pre><p>沿着行或列排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rand =np.random.RandomState(<span class="number">42</span>)</span><br><span class="line">X =np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line">print(X)</span><br></pre></td></tr></table></figure><pre><code>[[6 1 9 3 3 7] [9 7 4 9 4 5] [2 9 6 3 3 1] [2 7 1 0 6 3]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对X的每一列排序</span></span><br><span class="line">np.sort(X,axis=<span class="number">0</span>) <span class="comment">#从大到小</span></span><br></pre></td></tr></table></figure><pre><code>array([[2, 1, 1, 0, 3, 1],       [2, 7, 4, 3, 3, 3],       [6, 7, 6, 3, 4, 5],       [9, 9, 9, 9, 6, 7]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对行排序</span></span><br><span class="line">np.sort(X,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 3, 3, 6, 7, 9],       [4, 4, 5, 7, 9, 9],       [1, 2, 3, 3, 6, 9],       [0, 1, 2, 3, 6, 7]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''上述处理将行或者列当作独立的数组，任何行或列的值之间的关系将会丢失'''</span></span><br></pre></td></tr></table></figure><pre><code>&apos;上述处理将行或者列当作独立的数组，任何行或列的值之间的关系将会丢失&apos;</code></pre><h3 id="2-8-2-部分排序：分隔"><a href="#2-8-2-部分排序：分隔" class="headerlink" title="2.8.2 部分排序：分隔"></a>2.8.2 部分排序：分隔</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#有时候不需要排序，二十找到数组中第K小的值：np.partition</span></span><br><span class="line">x = np.array([<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>])</span><br><span class="line">np.partition(x,<span class="number">3</span>)<span class="comment">#第几小的数 这里是第三小 输出结果是新数组，最左边是第k小的值，往右是任意顺序的其他值</span></span><br></pre></td></tr></table></figure><pre><code>array([2, 1, 3, 4, 6, 5, 7])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#也可以沿着多维数组任意的轴进行分隔</span></span><br><span class="line">np.partition(X,<span class="number">2</span>,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 3, 3, 6, 9, 7],       [4, 4, 5, 9, 7, 9],       [1, 2, 3, 6, 3, 9],       [0, 1, 2, 7, 6, 3]])</code></pre><h3 id="2-8-3-demo-K个最近邻"><a href="#2-8-3-demo-K个最近邻" class="headerlink" title="2.8.3 demo:K个最近邻"></a>2.8.3 demo:K个最近邻</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = rand.rand(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn;seaborn.set()<span class="comment">#设置绘画风格</span></span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>],s = <span class="number">100</span>);</span><br></pre></td></tr></table></figure><img src="/2019/04/09/2.8%20数组的排序/output_15_0.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist_sq = np.sum((X[:,np.newaxis,:] - X[np.newaxis,:,:]) ** <span class="number">2</span> , axis= <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">difference = X[:, np.newaxis, :] - X[np.newaxis, : , :]</span><br><span class="line">difference.shape</span><br></pre></td></tr></table></figure><pre><code>(10, 10, 2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sq_differences = difference ** <span class="number">2</span></span><br><span class="line">sq_differences.shape</span><br></pre></td></tr></table></figure><pre><code>(10, 10, 2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist_sq = sq_differences.sum(<span class="number">-1</span>)</span><br><span class="line">dist_sq.shape</span><br></pre></td></tr></table></figure><pre><code>(10, 10)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist_sq.diagonal()</span><br></pre></td></tr></table></figure><pre><code>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nearest = np.argsort(dist_sq, axis=<span class="number">1</span>)</span><br><span class="line">print(nearest)</span><br></pre></td></tr></table></figure><pre><code>[[0 3 4 5 8 1 9 7 2 6] [1 4 6 9 8 0 7 3 2 5] [2 7 9 8 6 4 3 1 0 5] [3 5 0 8 4 9 7 2 1 6] [4 1 0 8 9 6 3 5 7 2] [5 3 0 8 4 9 1 7 2 6] [6 1 9 4 8 7 2 0 3 5] [7 2 9 8 6 4 1 3 0 5] [8 9 4 7 2 3 0 1 5 6] [9 8 7 2 6 1 4 0 3 5]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K = <span class="number">2</span></span><br><span class="line">nearest_partition = np.argpartition(dist_sq, K + <span class="number">1</span>, axis= <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt .scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>], s= <span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x2a2fa444be0&gt;</code></pre><img src="/2019/04/09/2.8%20数组的排序/output_23_1.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将每个点与他最近的两个点相连</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(X.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> nearest_partition[i, :K+<span class="number">1</span>]:</span><br><span class="line">        plt.plot(*zip(X[j], X[i]), color = <span class="string">"gray"</span>)</span><br></pre></td></tr></table></figure><img src="/2019/04/09/2.8%20数组的排序/output_24_0.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-8-1-N
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>2.7 Fancy indexing</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/2.7%20Fancy%20Indexing%20/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/2.7 Fancy Indexing /</id>
    <published>2019-04-08T23:49:27.000Z</published>
    <updated>2019-06-13T01:38:31.310Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h2 id="2-7-Fancy-indexing"><a href="#2-7-Fancy-indexing" class="headerlink" title="2.7 Fancy indexing"></a>2.7 Fancy indexing</h2><p>传递一个索引数组来一次性获得多个数组元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">rand = np.random.RandomState(<span class="number">42</span>)</span><br><span class="line">x = rand.randint(<span class="number">100</span>,size = <span class="number">10</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>[51 92 14 71 60 20 82 86 74 74]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x[<span class="number">3</span>], x[<span class="number">7</span>], x[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><pre><code>[71, 86, 14]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ind  = [<span class="number">3</span>, <span class="number">7</span> , <span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x [ind]</span><br></pre></td></tr></table></figure><pre><code>array([71, 86, 60])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ind = np.array([[<span class="number">3</span>,<span class="number">7</span>],</span><br><span class="line">                         [<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line">x[ind]<span class="comment">#结果的形状与索引数组的形状一直，而不是与被索引的数组的形状一致。</span></span><br></pre></td></tr></table></figure><pre><code>array([[71, 86],       [60, 20]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#也对多个维度使用</span></span><br><span class="line">X = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">X</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与标准索引相同，第一个索引是行，第二个是列：</span></span><br><span class="line">row = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">col = np.array([<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">X[row,col]</span><br></pre></td></tr></table></figure><pre><code>array([ 2,  5, 11])</code></pre><h3 id="2-7-2-组合索引"><a href="#2-7-2-组合索引" class="headerlink" title="2.7.2 组合索引"></a>2.7.2 组合索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><pre><code>[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]]<span class="comment"># 取第三行 相应顺序的元素</span></span><br></pre></td></tr></table></figure><pre><code>array([10,  8,  9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>:, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><pre><code>array([[ 6,  4,  5],       [10,  8,  9]])</code></pre><h3 id="2-7-3-demo-选择随机点"><a href="#2-7-3-demo-选择随机点" class="headerlink" title="2.7.3 demo 选择随机点"></a>2.7.3 demo 选择随机点</h3><p>有一个N × D的矩阵，表示D个维度的N个点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mean = [<span class="number">0</span> , <span class="number">0</span>]</span><br><span class="line">cov = [[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">            [<span class="number">2</span>,<span class="number">5</span>]]</span><br><span class="line">X = rand.multivariate_normal(mean,cov, <span class="number">100</span>)</span><br><span class="line">X.shape</span><br></pre></td></tr></table></figure><pre><code>(100, 2)</code></pre><p>可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn; seaborn.set()</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例用fancy indexing随机选取20个点 --不重复的索引值，并利用这些索引值找到相应的源数值</span></span><br><span class="line">indices = np.random.choice(X.shape[<span class="number">0</span>], <span class="number">20</span>, replace=<span class="literal">False</span>)</span><br><span class="line">indices<span class="comment">#选取的随机index</span></span><br></pre></td></tr></table></figure><pre><code>array([79, 32, 61, 11, 90, 23, 95, 36,  5, 38, 84, 16, 53, 34,  1, 69, 37,       17, 71, 56])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selections = X[indices]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selections.shape</span><br></pre></td></tr></table></figure><pre><code>(20, 2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X[:,<span class="number">0</span>], X[:, <span class="number">1</span>], alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.scatter(selections[:,<span class="number">0</span>], selections[:,<span class="number">1</span>],</span><br><span class="line">           facecolor = <span class="string">"none"</span>, edgecolor  = <span class="string">'b'</span>, s = <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h3 id="2-7-4-例用fancy-indexing修改值"><a href="#2-7-4-例用fancy-indexing修改值" class="headerlink" title="2.7.4 例用fancy indexing修改值"></a>2.7.4 例用fancy indexing修改值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x =np.arange(<span class="number">10</span>)</span><br><span class="line">i = np.array([<span class="number">1</span>,<span class="number">2</span> ,<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">x[i] = <span class="number">99</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([ 0, 99, 99, 99, 99,  5,  6,  7,  8,  9])</code></pre><h3 id="2-7-5-demo-数据区间的划分"><a href="#2-7-5-demo-数据区间的划分" class="headerlink" title="2.7.5 demo 数据区间的划分"></a>2.7.5 demo 数据区间的划分</h3><p>可以有效地将数据进行区间划分并手动创建直方图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">x = np.random.randn(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#手动计算直方图</span></span><br><span class="line">bins = np.linspace(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">20</span>)</span><br><span class="line">counts =np.zeros_like(bins)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为每个x找到合适的区间</span></span><br><span class="line">i = np.searchsorted(bins,x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为每个区间加上1</span></span><br><span class="line">np.add.at(counts, i, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(bins, counts, linestyle =<span class="string">"steps"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-7-Fan
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>2.6 比较、掩码和布尔逻辑</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/2.6%20%E6%AF%94%E8%BE%83%E3%80%81%E6%8E%A9%E7%A0%81%E5%92%8C%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/2.6 比较、掩码和布尔逻辑/</id>
    <published>2019-04-08T22:49:27.000Z</published>
    <updated>2019-06-13T01:38:53.120Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rainfall = pd.read_csv(<span class="string">'./Seattle2014.csv'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rainfall =rainfall[<span class="string">'PRCP'</span>].values</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inches = rainfall / <span class="number">254</span> <span class="comment">#1/1mm -&gt;inches</span></span><br><span class="line">inches.shape</span><br></pre></td></tr></table></figure><pre><code>(365,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns; sns.set()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(inches, <span class="number">40</span>);</span><br></pre></td></tr></table></figure><img src="/2019/04/09/2.6%20比较、掩码和布尔逻辑/output_5_0.png"><h2 id="2-6-2-和通用函数类似的比较操作"><a href="#2-6-2-和通用函数类似的比较操作" class="headerlink" title="2.6.2 和通用函数类似的比较操作"></a>2.6.2 和通用函数类似的比较操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &lt; <span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>array([ True,  True, False, False, False])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>array([False, False, False,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &lt;= <span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>array([ True,  True,  True, False, False])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x!=<span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>array([ True,  True, False,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x == <span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>array([False, False,  True, False, False])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span> * x)  == (x ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([False,  True, False, False, False])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">x = rng.randint(<span class="number">10</span>, size = (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[5, 0, 3, 3],       [7, 9, 3, 5],       [2, 4, 7, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &lt; <span class="number">6</span></span><br></pre></td></tr></table></figure><pre><code>array([[ True,  True,  True,  True],       [False, False,  True,  True],       [ True,  True, False, False]])</code></pre><h2 id="2-6-3-布尔数组"><a href="#2-6-3-布尔数组" class="headerlink" title="2.6.3 布尔数组"></a>2.6.3 布尔数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>[[5 0 3 3] [7 9 3 5] [2 4 7 6]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.count_nonzero(x &lt; <span class="number">6</span>)</span><br></pre></td></tr></table></figure><pre><code>8</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(x &lt; <span class="number">6</span>)</span><br></pre></td></tr></table></figure><pre><code>8</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(x &lt; <span class="number">6</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([4, 2, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.any(x &gt; <span class="number">8</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.any(x &lt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.all(x &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.all(x == <span class="number">6</span>)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.all(x &lt; <span class="number">8</span>, axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([ True, False,  True])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum((inches &gt; <span class="number">0.5</span>) | (inches &gt;= <span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>37</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"number days without rain: "</span>,np.sum(inches == <span class="number">0</span>))</span><br><span class="line">print(<span class="string">"number days with rain"</span>,np.sum(inches!=<span class="number">0</span>))</span><br><span class="line">print(<span class="string">"days with more than 0.5 inches:"</span>,np.sum(inches &gt; <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><pre><code>number days without rain:  215number days with rain 150days with more than 0.5 inches: 37</code></pre><h2 id="2-6-4-江布尔数组作为掩码"><a href="#2-6-4-江布尔数组作为掩码" class="headerlink" title="2.6.4 江布尔数组作为掩码"></a>2.6.4 江布尔数组作为掩码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[5, 0, 3, 3],       [7, 9, 3, 5],       [2, 4, 7, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &lt; <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>array([[False,  True,  True,  True],       [False, False,  True, False],       [ True,  True, False, False]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[x&lt;<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>array([0, 3, 3, 3, 2, 4])</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>2.5 广播</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/2.5%20%E5%B9%BF%E6%92%AD/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/2.5 广播/</id>
    <published>2019-04-08T21:49:27.000Z</published>
    <updated>2019-06-13T01:38:46.840Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><h3 id="1-两个数组维度不同，将小维度的数组姓张将在最左边补1"><a href="#1-两个数组维度不同，将小维度的数组姓张将在最左边补1" class="headerlink" title="1.两个数组维度不同，将小维度的数组姓张将在最左边补1"></a>1.两个数组维度不同，将小维度的数组姓张将在最左边补1</h3><h3 id="2-数组在形状上在任意维度上都不匹配，则数组形状会沿着维度为1的维度扩展以匹配另外一个数组的形状。"><a href="#2-数组在形状上在任意维度上都不匹配，则数组形状会沿着维度为1的维度扩展以匹配另外一个数组的形状。" class="headerlink" title="2.数组在形状上在任意维度上都不匹配，则数组形状会沿着维度为1的维度扩展以匹配另外一个数组的形状。"></a>2.数组在形状上在任意维度上都不匹配，则数组形状会沿着维度为1的维度扩展以匹配另外一个数组的形状。</h3><h3 id="3-如果两个数组在形状上任意维度都不匹配且没有等于1的维度则会发生异常。"><a href="#3-如果两个数组在形状上任意维度都不匹配且没有等于1的维度则会发生异常。" class="headerlink" title="3.如果两个数组在形状上任意维度都不匹配且没有等于1的维度则会发生异常。"></a>3.如果两个数组在形状上任意维度都不匹配且没有等于1的维度则会发生异常。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M = np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">a = np.arange(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(M.shape)</span><br><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure><pre><code>(2, 3)(3,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M + a</span><br></pre></td></tr></table></figure><pre><code>array([[1., 2., 3.],       [1., 2., 3.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>).reshape(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">b = np.arange(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a +b</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [1, 2, 3],       [2, 3, 4]])</code></pre><h2 id="广播的实际应用"><a href="#广播的实际应用" class="headerlink" title="广播的实际应用"></a>广播的实际应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X = np.random.random((<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">Xmean = X.mean(<span class="number">0</span>)</span><br><span class="line">print(Xmean)</span><br></pre></td></tr></table></figure><pre><code>[0.61088259 0.32736058 0.38863271]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> poly1d</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1 = poly1d([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(p1)</span><br></pre></td></tr></table></figure><pre><code>   3     21 x + 2 x + 3 x + 4</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;规则&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>2.4 聚合：最小值、最大值、其他值</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/2.4%20%E8%81%9A%E5%90%88%EF%BC%9A%E6%9C%80%E5%B0%8F%E5%80%BC%E3%80%81%E6%9C%80%E5%A4%A7%E5%80%BC%E3%80%81%E5%85%B6%E4%BB%96%E5%80%BC/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/2.4 聚合：最小值、最大值、其他值/</id>
    <published>2019-04-08T20:49:27.000Z</published>
    <updated>2019-06-13T01:38:44.430Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h2 id="2-4-聚合：最小值、最大值、其他值"><a href="#2-4-聚合：最小值、最大值、其他值" class="headerlink" title="2.4 聚合：最小值、最大值、其他值"></a>2.4 聚合：最小值、最大值、其他值</h2><h3 id="2-4-1-数组值求和"><a href="#2-4-1-数组值求和" class="headerlink" title="2.4.1 数组值求和"></a>2.4.1 数组值求和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">L = np.random.random(<span class="number">10</span>)</span><br><span class="line">sum(L)<span class="comment">#python内置函数sum</span></span><br></pre></td></tr></table></figure><pre><code>2.8464551359447516</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(L)<span class="comment">#np中的方法</span></span><br></pre></td></tr></table></figure><pre><code>2.8464551359447516</code></pre><h3 id="2-4-2-max-amp-min"><a href="#2-4-2-max-amp-min" class="headerlink" title="2.4.2 max &amp; min"></a>2.4.2 max &amp; min</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">big_array = np.random.rand(<span class="number">1000</span>)</span><br><span class="line">%timeit sum(big_array)</span><br><span class="line">%timeit np.sum(big_array)</span><br></pre></td></tr></table></figure><pre><code>164 µs ± 2.71 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)3.09 µs ± 41.5 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit min(big_array)</span><br></pre></td></tr></table></figure><pre><code>68.9 µs ± 2.82 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(big_array)</span><br></pre></td></tr></table></figure><pre><code>0.998342996761799</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit np.min(big_array) <span class="comment">#np中的语法明显要更快一些</span></span><br></pre></td></tr></table></figure><pre><code>3.11 µs ± 284 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.max(big_array)</span><br></pre></td></tr></table></figure><pre><code>0.998342996761799</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''另一种更简洁的语法是通过对象直接调用'''</span></span><br><span class="line">print(big_array.max(),big_array.min())</span><br></pre></td></tr></table></figure><pre><code>0.998342996761799 0.0013296091676711086</code></pre><p>1.多维度聚合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M = np.random.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(M)</span><br></pre></td></tr></table></figure><pre><code>[[0.17460472 0.8095875  0.98024377 0.58942287] [0.16436885 0.47376126 0.27927504 0.55330698] [0.1979097  0.3506765  0.48979371 0.07578097]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M.min(axis=<span class="number">0</span>)<span class="comment">#每一列的最小值</span></span><br></pre></td></tr></table></figure><pre><code>array([0.16436885, 0.3506765 , 0.27927504, 0.07578097])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M.max(axis=<span class="number">1</span>)<span class="comment">#每一行的最大值</span></span><br></pre></td></tr></table></figure><pre><code>array([0.98024377, 0.55330698, 0.48979371])</code></pre><h3 id="2-4-3-demo-美国总统身高"><a href="#2-4-3-demo-美国总统身高" class="headerlink" title="2.4.3 demo:美国总统身高"></a>2.4.3 demo:美国总统身高</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data  = pd.read_csv(<span class="string">"data/president_heights.csv"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heights = np.array(data[<span class="string">'height(cm)'</span>])</span><br><span class="line">print(heights)<span class="comment">#所有的身高</span></span><br></pre></td></tr></table></figure><pre><code>[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173 174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183 177 185 188 188 182 185]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#概括统计值</span></span><br><span class="line">print(<span class="string">"Mean height: "</span>,heights.mean())</span><br><span class="line">print(<span class="string">"standard deviation:"</span>,heights.std())</span><br><span class="line">print(<span class="string">"Minimum height: "</span>,heights.min())</span><br></pre></td></tr></table></figure><pre><code>Mean height:  179.73809523809524standard deviation: 6.931843442745892Minimum height:  163</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算分位数：</span></span><br><span class="line">print(<span class="string">"25th percentile: "</span>,np.percentile(heights, <span class="number">25</span>))</span><br><span class="line">print(<span class="string">"Median: "</span>,np.median(heights))</span><br><span class="line">print(<span class="string">"75 percentile"</span>, np.percentile(heights, <span class="number">75</span>))</span><br></pre></td></tr></table></figure><pre><code>25th percentile:  174.25Median:  182.075 percentile 183.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn</span><br><span class="line">seaborn.set()<span class="comment">#设置绘画风格</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(heights)</span><br><span class="line">plt.title(<span class="string">"heights distribution of US Presidents"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"heights(cm)"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"number"</span>);</span><br></pre></td></tr></table></figure><img src="/2019/04/09/2.4%20聚合：最小值、最大值、其他值/output_23_0.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-4-聚合：
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>2.3 Numpy 数组的计算：通用函数</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/2.3%20Numpy%20%E6%95%B0%E7%BB%84%E7%9A%84%E8%AE%A1%E7%AE%97%EF%BC%9A%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/2.3 Numpy 数组的计算：通用函数/</id>
    <published>2019-04-08T19:49:27.000Z</published>
    <updated>2019-06-13T01:39:05.660Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h2 id="2-3-Numpy-数组的计算：通用函数"><a href="#2-3-Numpy-数组的计算：通用函数" class="headerlink" title="2.3 Numpy 数组的计算：通用函数"></a>2.3 Numpy 数组的计算：通用函数</h2><p>numpy数组计算有时候会很慢，使之边块的关键是利用<strong>向量化</strong>操作，通常在<strong>通用函数</strong>（ufunc）中实现。</p><h3 id="2-3-1-缓慢的循环"><a href="#2-3-1-缓慢的循环" class="headerlink" title="2.3.1 缓慢的循环"></a>2.3.1 缓慢的循环</h3><p>Python在每次循环首先检查对象的类型，并且动态查找可以使用该数据类型的正确函数。Cpython在每次循环时必须做数据类型的检查和函数的调度。如果在编译代码是进行这样操作，就能在代码执行前知晓类型的生命，结果的计算也会更加有效率。</p><h3 id="2-3-3-探索Numpy的通用函数"><a href="#2-3-3-探索Numpy的通用函数" class="headerlink" title="2.3.3 探索Numpy的通用函数"></a>2.3.3 探索Numpy的通用函数</h3><p>一般有两种存在形式：<strong>一元通用函数</strong>，对单个输入操作；<strong>二元通用函数</strong>。</p><p>1.数组的运算</p><p>标准的加减乘除都可以使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">4</span>)</span><br><span class="line">print(<span class="string">"x   ="</span>,x)</span><br><span class="line">print(<span class="string">"x + 5  ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x - 5  ="</span>, x - <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x *  2  ="</span>, x * <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"X / 2  = "</span>,x / <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"x // 2 = "</span>,x // <span class="number">2</span>)<span class="comment">#地板除法</span></span><br></pre></td></tr></table></figure><pre><code>x   = [0 1 2 3]x + 5  = [5 6 7 8]x - 5  = [-5 -4 -3 -2]x *  2  = [0 2 4 6]X / 2  =  [0.  0.5 1.  1.5]x // 2 =  [0 0 1 1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#逻辑非、 **表示的指数运算符和%表示的模运算符的一元通用函数：</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"-x    ="</span>, -x)</span><br><span class="line">print(<span class="string">"x ** 2 ="</span>,x**<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"x % 2 = "</span>,x % <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>-x    = [ 0 -1 -2 -3]x ** 2 = [0 1 4 9]x % 2 =  [0 1 0 1]</code></pre><p>所有这些运算符都是Numpy内置函数的简单封装器</p><p>2.绝对值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x  = np.array([<span class="number">1</span>,<span class="number">-22</span>,<span class="number">3</span>,<span class="number">-4</span>])</span><br><span class="line">abs(x)</span><br></pre></td></tr></table></figure><pre><code>array([ 1, 22,  3,  4])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.absolute(x)</span><br></pre></td></tr></table></figure><pre><code>array([ 1, 22,  3,  4])</code></pre><p>这个函数也可以处理复数。 绝对值返回的是该复数的幅度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">3</span> - <span class="number">4j</span>, <span class="number">4</span><span class="number">-3j</span>,<span class="number">6</span> + <span class="number">8j</span>])</span><br><span class="line">abs(x)<span class="comment">#其实就是模</span></span><br></pre></td></tr></table></figure><pre><code>array([ 5.,  5., 10.])</code></pre><p>3.三角函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theta = np.linspace(<span class="number">0</span>, np.pi, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"theta  = "</span>,theta)</span><br><span class="line">print(<span class="string">"sin(theta) = "</span>, np.sin(theta))</span><br><span class="line">print(<span class="string">"cos(theta) = "</span>,np.cos(theta))</span><br><span class="line">print(<span class="string">"tan(theta) = "</span>,np.tan(theta))</span><br></pre></td></tr></table></figure><pre><code>theta  =  [0.         1.57079633 3.14159265]sin(theta) =  [0.0000000e+00 1.0000000e+00 1.2246468e-16]cos(theta) =  [ 1.000000e+00  6.123234e-17 -1.000000e+00]tan(theta) =  [ 0.00000000e+00  1.63312394e+16 -1.22464680e-16]</code></pre><p>逆三角函数也是可以用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"theta  = "</span>,theta)</span><br><span class="line">print(<span class="string">"arcsin(theta) = "</span>, np.arcsin(theta))</span><br><span class="line">print(<span class="string">"arccos(theta) = "</span>,np.arccos(theta))</span><br><span class="line">print(<span class="string">"arctan(theta) = "</span>,np.arctan(theta))</span><br></pre></td></tr></table></figure><pre><code>theta  =  [0.         1.57079633 3.14159265]arcsin(theta) =  [ 0. nan nan]arccos(theta) =  [1.57079633        nan        nan]arctan(theta) =  [0.         1.00388482 1.26262726]D:\Software\Anaconda3\lib\site-packages\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in arcsinD:\Software\Anaconda3\lib\site-packages\ipykernel_launcher.py:3: RuntimeWarning: invalid value encountered in arccos  This is separate from the ipykernel package so we can avoid doing imports until</code></pre><p>4.指数和对数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(<span class="string">"x ="</span>,x)</span><br><span class="line">print(<span class="string">"e^x ="</span>,np.exp(x))</span><br><span class="line">print(<span class="string">"2^x ="</span>,np.exp2(x))</span><br><span class="line">print(<span class="string">"3^x ="</span>,np.power(<span class="number">3</span>,x))</span><br></pre></td></tr></table></figure><pre><code>x = [1, 2, 3]e^x = [ 2.71828183  7.3890561  20.08553692]2^x = [2. 4. 8.]3^x = [ 3  9 27]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">10</span>]</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"ln(x) ="</span>,np.log(x))</span><br><span class="line">print(<span class="string">"log2(x) ="</span>,np.log2(x))</span><br><span class="line">print(<span class="string">"log10(x) = "</span>,np.log10(x))</span><br></pre></td></tr></table></figure><pre><code>x =  [1, 2, 4, 10]ln(x) = [0.         0.69314718 1.38629436 2.30258509]log2(x) = [0.         1.         2.         3.32192809]log10(x) =  [0.         0.30103    0.60205999 1.        ]</code></pre><h3 id="2-3-4-高级的通用函数特性"><a href="#2-3-4-高级的通用函数特性" class="headerlink" title="2.3.4 高级的通用函数特性"></a>2.3.4 高级的通用函数特性</h3><p>1.指定输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x =np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.empty(<span class="number">5</span>)</span><br><span class="line">np.multiply(x, <span class="number">10</span>, out = y)</span><br><span class="line">print(y) <span class="comment">#out用来指定计算结果存放位置</span></span><br></pre></td></tr></table></figure><pre><code>[ 0. 10. 20. 30. 40.]</code></pre><p>也可以用作数组视图，例如可以将计算结果写入指定数组的每隔一个元素的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = np.zeros(<span class="number">10</span>)</span><br><span class="line">np.power(<span class="number">2</span>, x, out = y[::<span class="number">2</span>])</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><pre><code>[ 1.  0.  2.  0.  4.  0.  8.  0. 16.  0.]</code></pre><p>2.聚合</p><p>如果用特定的运算reduce一个数组。那么可以用任何通用函数的reduce方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">np.add.reduce(x)<span class="comment">#返回所有元素的和</span></span><br></pre></td></tr></table></figure><pre><code>15</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.multiply.reduce(x)<span class="comment">#所有元素的成绩</span></span><br></pre></td></tr></table></figure><pre><code>120</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.add.accumulate(x)<span class="comment">#需要存储每次计算的中间结果</span></span><br></pre></td></tr></table></figure><pre><code>array([ 1,  3,  6, 10, 15], dtype=int32)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.multiply.accumulate(x)</span><br></pre></td></tr></table></figure><pre><code>array([  1,   2,   6,  24, 120], dtype=int32)</code></pre><p>3.外积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">np.multiply.outer(x,x) <span class="comment">#获得两个不同输入数组所有元素对的函数运算结果</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  3,  4,  5],       [ 2,  4,  6,  8, 10],       [ 3,  6,  9, 12, 15],       [ 4,  8, 12, 16, 20],       [ 5, 10, 15, 20, 25]])</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-3-Num
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>2.2 Numpy数组基础</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/2.2%20Numpy%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/2.2 Numpy数组基础/</id>
    <published>2019-04-08T17:49:27.000Z</published>
    <updated>2019-06-13T01:39:14.540Z</updated>
    
    <content type="html"><![CDATA[<p>本文源码请见我的<a href="https://github.com/qdqzy/NotesofPythonDataScienceHandbook" target="_blank" rel="noopener">GitHub</a></p><h2 id="2-2-Numpy数组基础"><a href="#2-2-Numpy数组基础" class="headerlink" title="2.2 Numpy数组基础"></a>2.2 Numpy数组基础</h2><h3 id="2-2-1-Numpy数组属性"><a href="#2-2-1-Numpy数组属性" class="headerlink" title="2.2.1 Numpy数组属性"></a>2.2.1 Numpy数组属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.random.randint(<span class="number">10</span>, size = <span class="number">6</span>)</span><br><span class="line">x2 = np.random.randint(<span class="number">10</span>, size = (<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">x3 = np.random.randint(<span class="number">10</span>, size  = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment">#分别是一维 二维 三维数组</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"x3 ,ndim: "</span>, x3.ndim)</span><br><span class="line">print(<span class="string">"x3 ,shape: "</span>, x3.shape)</span><br><span class="line">print(<span class="string">"x3 ,ndim: "</span>, x3.size)</span><br><span class="line"><span class="comment">#每个数组有nidm 维度， shape 大小， size总大小属性</span></span><br></pre></td></tr></table></figure><pre><code>x3 ,ndim:  3x3 ,shape:  (3, 4, 5)x3 ,ndim:  60</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(x1.dtype)</span><br><span class="line"><span class="comment">#dtype数据类型</span></span><br></pre></td></tr></table></figure><pre><code>int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每个数组元素字节大小：itemsize 数组总字节大小：nbtytes;</span></span><br><span class="line">print(<span class="string">"itemsize of x1:"</span>,x1.itemsize, <span class="string">'bytes'</span>)</span><br><span class="line">print(<span class="string">'nbytes of x2:'</span>,x2.nbytes, <span class="string">'bytes'</span>)</span><br></pre></td></tr></table></figure><pre><code>itemsize of x1: 4 bytesnbytes of x2: 48 bytes</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''一般可认为nbytes = itemsize * size'''</span></span><br></pre></td></tr></table></figure><pre><code>&apos;一般可认为nbytes = itemsize * size&apos;</code></pre><h3 id="2-2-2-数组索引：获取单个元素"><a href="#2-2-2-数组索引：获取单个元素" class="headerlink" title="2.2.2 数组索引：获取单个元素"></a>2.2.2 数组索引：获取单个元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([5, 0, 3, 3, 7, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">4</span>]</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><pre><code>9</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">-2</span>]</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多维数组中使用逗号分隔的索引元组获取元素：</span></span><br><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[3, 5, 2, 4],       [7, 6, 8, 8],       [1, 6, 7, 7]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[<span class="number">2</span>,<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2[<span class="number">2</span>,<span class="number">-1</span>] = <span class="number">12321</span></span><br><span class="line"><span class="comment">#通过索引改变值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[    3,     5,     2,     4],       [    7,     6,     8,     8],       [    1,     6,     7, 12321]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Numpy是固定类型的，浮点插入整型数会被截断</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><pre><code>&apos;\nNumpy是固定类型的，浮点插入整型数会被截断\n&apos;</code></pre><h3 id="2-2-3-数组切片：获取子数组"><a href="#2-2-3-数组切片：获取子数组" class="headerlink" title="2.2.3 数组切片：获取子数组"></a>2.2.3 数组切片：获取子数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[:<span class="number">-3</span>]</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>:]</span><br></pre></td></tr></table></figure><pre><code>array([3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure><pre><code>array([3, 4, 5, 6])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>array([0, 2, 4, 6, 8])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">1</span>::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>array([1, 3, 5, 7, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x[::<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#逆序</span></span><br></pre></td></tr></table></figure><pre><code>array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[    3,     5,     2,     4],       [    7,     6,     8,     8],       [    1,     6,     7, 12321]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[:<span class="number">2</span>, :<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[3, 5, 2],       [7, 6, 8]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[:<span class="number">3</span>,::<span class="number">2</span>]<span class="comment">#所有行，每隔一列</span></span><br></pre></td></tr></table></figure><pre><code>array([[3, 2],       [7, 8],       [1, 7]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[::<span class="number">-1</span>,::<span class="number">-1</span>] <span class="comment">#全部逆序</span></span><br></pre></td></tr></table></figure><pre><code>array([[12321,     7,     6,     1],       [    8,     8,     6,     7],       [    4,     2,     5,     3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''3.获取数组的行和列'''</span></span><br></pre></td></tr></table></figure><pre><code>&apos;3.获取数组的行和列&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x2[:,<span class="number">0</span>]) <span class="comment">#x2的第一列</span></span><br></pre></td></tr></table></figure><pre><code>[3 7 1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x2[<span class="number">0</span>,:])<span class="comment">#第一行</span></span><br></pre></td></tr></table></figure><pre><code>[3 5 2 4]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''4.非副本视图的子数组'''</span></span><br></pre></td></tr></table></figure><pre><code>&apos;4.非副本视图的子数组&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x2)</span><br></pre></td></tr></table></figure><pre><code>[[    3     5     2     4] [    7     6     8     8] [    1     6     7 12321]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2_sub = x2[:<span class="number">2</span>,:<span class="number">2</span>]</span><br><span class="line">x2_sub</span><br></pre></td></tr></table></figure><pre><code>array([[3, 5],       [7, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改视图也会更改原数组</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2_sub[<span class="number">0</span>,<span class="number">1</span>]= <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[    3,   100,     2,     4],       [    7,     6,     8,     8],       [    1,     6,     7, 12321]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.创建副本</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以通过创建数组的视图之后用copy（）实现</span></span><br><span class="line">x2_sub_copy = x2_sub.copy()</span><br><span class="line">x2_sub_copy[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">print(x2_sub_copy)</span><br><span class="line">print(x2,<span class="string">'这里原数组没有被更改'</span>)</span><br></pre></td></tr></table></figure><pre><code>[[ 99 100] [  7   6]][[    3   100     2     4] [    7     6     8     8] [    1     6     7 12321]] 这里原数组没有被更改</code></pre><h3 id="2-2-4-数组的变形"><a href="#2-2-4-数组的变形" class="headerlink" title="2.2.4 数组的变形"></a>2.2.4 数组的变形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reshape</span></span><br><span class="line">a  =np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [3, 4, 5],       [6, 7, 8]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常见的变形是将一个一维数组转为二维的行或列的矩阵</span></span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.reshape((<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[np.newaxis, :]<span class="comment">#通过newaxis获得的行向量</span></span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变形成列向量</span></span><br><span class="line">x.reshape((<span class="number">3</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[1],       [2],       [3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[:,np.newaxis]</span><br></pre></td></tr></table></figure><pre><code>array([[1],       [2],       [3]])</code></pre><h3 id="2-2-5-数组的拼接和分裂"><a href="#2-2-5-数组的拼接和分裂" class="headerlink" title="2.2.5 数组的拼接和分裂"></a>2.2.5 数组的拼接和分裂</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">np.concatenate([x,y])</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 3, 2, 1])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = [<span class="number">1212</span>,<span class="number">344</span>,<span class="number">343</span>]</span><br><span class="line">np.concatenate([x,y,z])</span><br></pre></td></tr></table></figure><pre><code>array([   1,    2,    3,    3,    2,    1, 1212,  344,  343])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分裂</span></span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1,x2,x3 = np.split(x,[<span class="number">3</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x1,x2,x3) <span class="comment">#索引列表记录的是分裂点的位置</span></span><br></pre></td></tr></table></figure><pre><code>[1 2 3] [4 5] [3 2 1]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文源码请见我的&lt;a href=&quot;https://github.com/qdqzy/NotesofPythonDataScienceHandbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-2-Num
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>第一章 Ipython</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/04/09/ch1/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/04/09/ch1/</id>
    <published>2019-04-08T16:49:27.000Z</published>
    <updated>2019-04-09T13:24:25.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Ipython"><a href="#第一章-Ipython" class="headerlink" title="第一章 Ipython"></a>第一章 Ipython</h1><h2 id="1-2-1-用符号？获取文档"><a href="#1-2-1-用符号？获取文档" class="headerlink" title="1.2.1 用符号？获取文档"></a>1.2.1 用符号？获取文档</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">len?</span><br><span class="line"><span class="string">'''引入？作为相关信息的缩写，在想要查询的对象后面加上？可以查询'''</span></span><br><span class="line"><span class="string">'''也可以在自己创建的函数和对象中惊醒查看帮助文档，方法是再函数创建一个docstring，在第一行放置了一个字符串字面量'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="string">'''这个函数是返回一个实数的平方'''</span></span><br><span class="line">    <span class="keyword">return</span> a ** <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square?</span><br></pre></td></tr></table></figure><h2 id="1-2-2-获取源码"><a href="#1-2-2-获取源码" class="headerlink" title="1.2.2 ??获取源码"></a>1.2.2 ??获取源码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square??</span><br></pre></td></tr></table></figure><h3 id="通配符-补全"><a href="#通配符-补全" class="headerlink" title="通配符 * 补全"></a>通配符 * 补全</h3><h2 id="1-4-魔法命令"><a href="#1-4-魔法命令" class="headerlink" title="1.4 魔法命令"></a>1.4 魔法命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%paste %cpaste  %run %timeit ?、%magic %lsmagic</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Ipython&quot;&gt;&lt;a href=&quot;#第一章-Ipython&quot; class=&quot;headerlink&quot; title=&quot;第一章 Ipython&quot;&gt;&lt;/a&gt;第一章 Ipython&lt;/h1&gt;&lt;h2 id=&quot;1-2-1-用符号？获取文档&quot;&gt;&lt;a href=&quot;#1-2
      
    
    </summary>
    
    
      <category term="data science" scheme="http://qdqzy/qdqzy.github.io/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达机器学习04</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/02/17/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A004/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/02/17/吴恩达机器学习04/</id>
    <published>2019-02-17T00:49:27.000Z</published>
    <updated>2019-03-26T12:47:41.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑回归-Logistics-Regression"><a href="#逻辑回归-Logistics-Regression" class="headerlink" title="逻辑回归 Logistics Regression"></a>逻辑回归 Logistics Regression</h1><h2 id="4-1分类问题"><a href="#4-1分类问题" class="headerlink" title="4.1分类问题"></a>4.1分类问题</h2><p>之前的章节介绍的是如何进行线性回归的问题，本质是回归；这个章节开始介绍分类问题。最常用的回归算法是逻辑回归，就是这个标题。分类问题典型的例子是肿瘤分类，判断是良性还是恶性肿瘤；进行垃圾邮件的标记等等。分类可以分为很多种，但是最基本的是二分类。我们将因变量(dependent variable)可能属于的两个类分别称为负向类(negative class)和正向类(positive class)，则因变量 y属于0,1 ，其中 0 表示负向类，1 表示正向类。那么如何解决呢？这里采用的是和之前有关的线性回归算法。可以假设大于1的归为1，小于0的归为0类。问题在于：线性函数的值域如如果总是在同一个区间内，例如一到正无穷那么就无法进行分类。线性回归的坏处在于输出值总有可能会超出0，1这个范围。所以逻辑回归的实质<strong>它的输出值永远在 0 到 1 之间</strong>。虽然这个算法名字是带有回归的，但是她确实可以做到分类。</p><h2 id="4-2假说表示"><a href="#4-2假说表示" class="headerlink" title="4.2假说表示"></a>4.2假说表示</h2><p>对于上述的假设，我们想要的是 0 &lt;= h𝜃(𝑥) &lt;= 1.在这里引入了一个新的模型—<strong>逻辑回归模型</strong>它可以令输出变量的范围始终在0，1之间。逻辑 回归模型的假设是: h𝜃(𝑥) = 𝑔(𝜃𝑇𝑋) 其中: 𝑋 代表特征向量 𝑔 代表逻辑函数(logisticfunction)是一个常用的逻辑函数为 S 形函数(Sigmoid function)，就是sigmoid函数。Python代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">def sigmoid(z):</span><br><span class="line">    return 1 / (1 + np.exp(-z))</span><br></pre></td></tr></table></figure></p><img src="/2019/02/17/吴恩达机器学习04/4-1.png" title="Pic of Sigmoid Function"><p>理解： h（x）的作用就是对于给定的变量，根据选择的参数计算输出变量 = 1 的可能性。<img src="/2019/02/17/吴恩达机器学习04/4-2.jpeg"><img src="/2019/02/17/吴恩达机器学习04/4-3.jpeg"></p><h2 id="4-3决策边界"><a href="#4-3决策边界" class="headerlink" title="4.3决策边界"></a>4.3决策边界</h2><p>这个概念叫做decision boundary。在一个分类图像中，若是用的是逻辑回归，那么可以根据预测结果y = 1 或者 0 来分为两大类别。在图像中将这两个类别分开的边界就是决策边界。决策边界可以是一条直线，也可以是曲线。模型越复杂可能需要非常复杂的决策边界来区分不同的类别。</p><h2 id="4-4代价函数"><a href="#4-4代价函数" class="headerlink" title="4.4代价函数"></a>4.4代价函数</h2><p>cost function。这个问题是根据上面的问题产生的，当我们要去拟合目标的回归模型，我们需要找到一组合适的参数θ，如何选择这个参数我们建立了选择θ的目标函数作为代价函数。在线性回归中，定义的代价函数是所有模型误差的平方和。 如果将h𝜃(𝑥)带入定义的代价函数中，这个是得到的是一个非凸函数。 即存在多个局部最小值，无法准确找到全局最小值。<img src="/2019/02/17/吴恩达机器学习04/4-4.png">我发现后面打字实在太麻烦了，直接放文字笔记吧。。。。。😓<img src="/2019/02/17/吴恩达机器学习04/4-5.jpeg"><img src="/2019/02/17/吴恩达机器学习04/4-6.jpeg"><img src="/2019/02/17/吴恩达机器学习04/4-7.jpeg"><img src="/2019/02/17/吴恩达机器学习04/4-8.jpeg"><img src="/2019/02/17/吴恩达机器学习04/4-9.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逻辑回归-Logistics-Regression&quot;&gt;&lt;a href=&quot;#逻辑回归-Logistics-Regression&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归 Logistics Regression&quot;&gt;&lt;/a&gt;逻辑回归 Logist
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://qdqzy/qdqzy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达机器学习03</title>
    <link href="http://qdqzy/qdqzy.github.io/2019/02/16/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A003/"/>
    <id>http://qdqzy/qdqzy.github.io/2019/02/16/吴恩达机器学习03/</id>
    <published>2019-02-16T07:35:44.000Z</published>
    <updated>2019-02-25T00:48:14.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多变量线性回归-Linear-Regression-with-Multiple-Variables"><a href="#多变量线性回归-Linear-Regression-with-Multiple-Variables" class="headerlink" title="多变量线性回归 Linear Regression with Multiple Variables"></a>多变量线性回归 Linear Regression with Multiple Variables</h1><h2 id="3-1多维特征"><a href="#3-1多维特征" class="headerlink" title="3.1多维特征"></a>3.1多维特征</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;其实这个是第四节，但是上一节讲的是线性代数，都是简单的初等变换用到的知识，不用看了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;第四节从原来只有单一变量（size-&gt;price）h𝜃(𝑥) = 𝜃0 + 𝜃1𝑥 拓展到多变量，例如研究房间数，层数，房屋寿命等等对于价格的影响。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;增添更多特征后，我们引入一系列新的注释:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;𝑛 代表特征的<strong>数量</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;𝑥(𝑖)代表第 𝑖 个训练实例，是特征矩阵中的第𝑖行，是一个<strong>向量(vector)</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;𝑥(𝑖)代表特征矩阵中第 𝑖 行的第 𝑗 个特征，也就是第 𝑖 个训练实例的第 𝑗 个特征。 𝑗如上图的𝑥(2) = 3, 𝑥(2) = 2， 23支持多变量的假设 h 表示为:h𝜃(𝑥) = 𝜃0 + 𝜃1𝑥1 + 𝜃2𝑥2+. . . +𝜃𝑛𝑥𝑛，这个公式中有𝑛 + 1个参数和𝑛个变量，为了使得公式能够简化一些，引入𝑥0 = 1，则公 式转化为:h𝜃(𝑥) = 𝜃0𝑥0 + 𝜃1𝑥1 + 𝜃2𝑥2+. . . +𝜃𝑛𝑥𝑛此时模型中的参数是一个𝑛 + 1维的向量，任何一个训练实例也都是𝑛 + 1维的向量，特 征矩阵𝑋的维度是 𝑚 ∗ (𝑛 + 1)。 因此公式可以简化为:h𝜃(𝑥) = 𝜃𝑇𝑋，其中上标𝑇代表矩阵转置。</p><h2 id="3-2多变量梯度下降Gradient-Descent-for-Multiple-Variables"><a href="#3-2多变量梯度下降Gradient-Descent-for-Multiple-Variables" class="headerlink" title="3.2多变量梯度下降Gradient Descent for Multiple Variables"></a>3.2多变量梯度下降Gradient Descent for Multiple Variables</h2><p>假设：h𝜃(𝑥)=𝜃𝑇𝑋=𝜃0+𝜃1𝑥1+𝜃2𝑥2+…+𝜃𝑛𝑥𝑛，</p><p>参数：Θ0，Θ1，Θ2，Θ3，。。。。</p><p>代价函数：平方和，即:𝐽(𝜃 , 𝜃 . . . 𝜃 ) =所有建模误差的平方和 这里就看成向量代码示例:计算代价函数 𝐽(𝜃)= 1 ∑𝑚 (h (𝑥(𝑖))−𝑦(𝑖))2 其中:h (𝑥)=𝜃𝑇𝑋=𝜃 𝑥 +𝜃 𝑥 +𝜃2𝑥2+…+𝜃𝑛𝑥𝑛</p><p>化简到这里纯粹就是数学知识了，我觉得第一遍把过程搞明白以后就不用在推演了。</p><p>Python 代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def computeCost(X, y, theta):</span><br><span class="line">    inner = np.power(((X * theta.T) - y), 2) </span><br><span class="line">    return np.sum(inner) / (2 * len(X))</span><br></pre></td></tr></table></figure></p><h2 id="3-3梯度下降法实践-1-特征缩放"><a href="#3-3梯度下降法实践-1-特征缩放" class="headerlink" title="3.3梯度下降法实践 1-特征缩放"></a>3.3梯度下降法实践 1-特征缩放</h2><p>如果特征具有相近的尺度，这将帮助梯度下降算法快速收敛。若维度相差过大，则需要多次（非常多）迭代才能收敛。</p><img src="/2019/02/16/吴恩达机器学习03/3.3.1.png" title="收敛程度"><p>解决方法：所有特征的尺度缩放到-1&lt;=X&lt;=1</p><p><strong>Feature Scaling</strong>（只要尽量保持接近就行，一般保持在（-3，3）之间）</p><p>最简单的方法均值归一化：𝑥𝑛 = （𝑥𝑛−𝜇𝑛)/𝑠𝑛，其中 𝜇𝑛是平均值，𝑠𝑛是标准差。</p><h2 id="3-4学习率-learning-rate"><a href="#3-4学习率-learning-rate" class="headerlink" title="3.4学习率 learning rate"></a>3.4学习率 learning rate</h2><p>已经证明了α足够小的时候每次迭代后代价函数J(θ)都会下降。<img src="/2019/02/16/吴恩达机器学习03/3.4.1.png" title="代价函数随迭代次数的变化">总结：α：too small 收敛太慢α：too large 可能不会收敛甚至发散通常可以考虑尝试些学习率:𝛼 = 0.01，0.03，0.1，0.3，1，3，10</p><h2 id="3-5特征和多项式回归Features-and-Polynomial-Regression"><a href="#3-5特征和多项式回归Features-and-Polynomial-Regression" class="headerlink" title="3.5特征和多项式回归Features and Polynomial Regression"></a>3.5特征和多项式回归Features and Polynomial Regression</h2><p>这个问题是在实际情况中产生的，大致呈线性回归的数据是不一定严格遵守线性方程的，大部分情况是要用曲线去拟合。比如可能是三次函数的一小段等等。<img src="/2019/02/16/吴恩达机器学习03/3.5.1.png" title="实际的拟合情况">采用多项式回归模型，运行梯度下降算法之前特征缩放十分重要。</p><h2 id="3-6正规方程-Normal-Equation"><a href="#3-6正规方程-Normal-Equation" class="headerlink" title="3.6正规方程 Normal Equation"></a>3.6正规方程 Normal Equation</h2><p>上述为了解决代价函数的最小值问题，采用的是梯度下降算法。但有的时候cost function使用梯度下降法太麻烦，可以直接采用求导的方式寻求使得代价函数最小的参数的。说白了就是和高中经常做的求导数等于0的极值点的问题。<img src="/2019/02/16/吴恩达机器学习03/3.6.png">这两种方法的主要区别：梯度下降 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正规方程需要选择学习率 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不需要要多次迭代 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一次计算得出n很大时候也可以使用 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n过大的时候计算代价太大 （矩阵的运算）适用于各种模型 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只适用于线性模型<strong>这里重要的是参数θ是一个向量</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多变量线性回归-Linear-Regression-with-Multiple-Variables&quot;&gt;&lt;a href=&quot;#多变量线性回归-Linear-Regression-with-Multiple-Variables&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://qdqzy/qdqzy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
